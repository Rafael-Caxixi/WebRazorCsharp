@page "/editar-cinema/{NomeCinema}"
@inject ISnackbar Snackbar
@inject CinemaAPI cinemaAPI
@inject NavigationManager navigationManager
<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Cinema</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Cinema"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        @*  <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." /> *@

        <div class="d-flex align-center justify-space-between mt-4">
             <MudButton Variant="Variant.Filled"
                       @onclick="Listar"
                       Color="Color.Primary"
                       Class="ml-auto">
                Voltar
            </MudButton> 
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="Deletar">
                Deletar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       OnClick="Salvar">
                Salvar
            </MudButton>

        </div>

    </MudForm>
</MudPaper>

@code {
    private string? nome;
    [Parameter]
    public string? NomeCinema { get; set; }
    public CinemaResponse cinemaResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cinemaResponse = await cinemaAPI.GetCinemaPorNomeAsync(NomeCinema);
        nome = cinemaResponse!.Nome;
    }
    private async Task Deletar()
    {
        await cinemaAPI.DeleteCinemaAsync(cinemaResponse!.Id);
        Snackbar.Add($"Cinema {cinemaResponse.Nome} deletado com sucesso!", Severity.Success);
        await Task.Delay(1000);
        navigationManager.NavigateTo("/cinemas");
    }

    public async Task Salvar()
    {
        var cinemaRequestEdit = new CinemaRequestEdit(cinemaResponse.Id,nome!,"");
        await cinemaAPI.UpdateCinemaAsync(cinemaRequestEdit);
        Snackbar.Add($"Cinema {cinemaResponse.Nome} alterado com sucesso!", Severity.Success);
        await Task.Delay(1000);
        navigationManager.NavigateTo("/cinemas");
    }

    private async Task Listar()
    {
        navigationManager.NavigateTo("/cinemas");
    }

}
